    {
      "name": "Get Authorization URL",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response contains auth URL\", function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.success).to.be.true;",
              "    pm.expect(responseJson.authUrl).to.exist;",
              "});",
              "",
              "// Store auth URL for easy access",
              "if (pm.response.json().authUrl) {",
              "    pm.environment.set(\"auth_url\", pm.response.json().authUrl);",
              "    console.log(\"Authorization URL:\", pm.response.json().authUrl);",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/auth",
          "host": ["{{base_url}}"],
          "path": ["auth"]
        },
        "description": "Get OAuth authorization URL to authenticate with Google Drive"
      },
      "response": []
    },
    {
      "name": "Check Auth Status",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response contains auth status\", function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.authenticated).to.exist;",
              "});",
              "",
              "if (pm.response.json().authenticated) {",
              "    console.log(\"✅ Application is authenticated and ready to upload files\");",
              "} else {",
              "    console.log(\"❌ Application is not authenticated. Use /auth endpoint first.\");",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/auth/status",
          "host": ["{{base_url}}"],
          "path": ["auth", "status"]
        },
        "description": "Check if the application is authenticated with Google Drive"
      },
      "response": []
    },{
  "info": {
    "name": "Google Drive Upload API",
    "description": "API endpoints for uploading files to Google Drive",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "google-drive-upload-api-collection",
    "version": "1.0.0"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3000",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has status OK\", function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.status).to.eql(\"OK\");",
              "});",
              "",
              "pm.test(\"Response has timestamp\", function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.timestamp).to.exist;",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/health",
          "host": ["{{base_url}}"],
          "path": ["health"]
        },
        "description": "Check if the API service is running and healthy"
      },
      "response": []
    },
    {
      "name": "Upload Single File",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Upload was successful\", function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.success).to.be.true;",
              "});",
              "",
              "pm.test(\"Response contains file information\", function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.file).to.exist;",
              "    pm.expect(responseJson.file.id).to.exist;",
              "    pm.expect(responseJson.file.name).to.exist;",
              "    pm.expect(responseJson.file.viewLink).to.exist;",
              "});",
              "",
              "// Store file ID for other tests",
              "if (pm.response.json().file && pm.response.json().file.id) {",
              "    pm.environment.set(\"uploaded_file_id\", pm.response.json().file.id);",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "formdata",
          "formdata": [
            {
              "key": "file",
              "type": "file",
              "src": [],
              "description": "Select a file to upload to Google Drive"
            }
          ]
        },
        "url": {
          "raw": "{{base_url}}/upload",
          "host": ["{{base_url}}"],
          "path": ["upload"]
        },
        "description": "Upload a single file to Google Drive"
      },
      "response": []
    },
    {
      "name": "Upload Multiple Files",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response contains results\", function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.results).to.exist;",
              "    pm.expect(responseJson.results.successful).to.exist;",
              "    pm.expect(responseJson.results.failed).to.exist;",
              "});",
              "",
              "pm.test(\"At least one file was processed\", function () {",
              "    const responseJson = pm.response.json();",
              "    const totalFiles = responseJson.results.successful.length + responseJson.results.failed.length;",
              "    pm.expect(totalFiles).to.be.greaterThan(0);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "formdata",
          "formdata": [
            {
              "key": "files",
              "type": "file",
              "src": [],
              "description": "Select multiple files to upload (max 10 files)"
            },
            {
              "key": "files",
              "type": "file",
              "src": [],
              "description": "Additional file (optional)"
            }
          ]
        },
        "url": {
          "raw": "{{base_url}}/upload-multiple",
          "host": ["{{base_url}}"],
          "path": ["upload-multiple"]
        },
        "description": "Upload multiple files to Google Drive (up to 10 files)"
      },
      "response": []
    },
    {
      "name": "List Recent Files",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response was successful\", function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.success).to.be.true;",
              "});",
              "",
              "pm.test(\"Response contains files array\", function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.files).to.be.an('array');",
              "});",
              "",
              "pm.test(\"Files have required properties\", function () {",
              "    const responseJson = pm.response.json();",
              "    if (responseJson.files && responseJson.files.length > 0) {",
              "        const firstFile = responseJson.files[0];",
              "        pm.expect(firstFile.id).to.exist;",
              "        pm.expect(firstFile.name).to.exist;",
              "        pm.expect(firstFile.createdTime).to.exist;",
              "    }",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/files",
          "host": ["{{base_url}}"],
          "path": ["files"]
        },
        "description": "List the 10 most recent files uploaded to Google Drive"
      },
      "response": []
    },
    {
      "name": "Upload Without File (Error Test)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test(\"Upload failed as expected\", function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.success).to.be.false;",
              "});",
              "",
              "pm.test(\"Error message indicates no file\", function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.error).to.include(\"No file\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "formdata",
          "formdata": []
        },
        "url": {
          "raw": "{{base_url}}/upload",
          "host": ["{{base_url}}"],
          "path": ["upload"]
        },
        "description": "Test error handling when no file is provided"
      },
      "response": []
    },
    {
      "name": "Invalid Endpoint (404 Test)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 404\", function () {",
              "    pm.response.to.have.status(404);",
              "});",
              "",
              "pm.test(\"Error indicates endpoint not found\", function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.success).to.be.false;",
              "    pm.expect(responseJson.error).to.include(\"not found\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/invalid-endpoint",
          "host": ["{{base_url}}"],
          "path": ["invalid-endpoint"]
        },
        "description": "Test 404 error handling for invalid endpoints"
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Pre-request script for all requests",
          "console.log('Making request to:', pm.request.url);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "pm.test('Response time is less than 30 seconds', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(30000);",
          "});",
          "",
          "pm.test('Response is JSON', function () {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "});"
        ]
      }
    }
  ]
}